#!/bin/bash

# NAME:         spotify_playlist_exporter
# VERSION:      0.1
# AUTHOR:       (c) 2014 Glutanimate <https://github.com/Glutanimate/>
# DESCRIPTION:  Exports spotify playlists to a plain textfile
# FEATURES:     
# DEPENDENCIES: recode curl yad
# SOURCES:      http://www.commandlinefu.com/commands/view/5413/extract-title-from-html-files
#
# LICENSE:      GNU GPLv3 (http://www.gnu.de/documents/gpl-3.0.en.html)
#
# NOTICE:       THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. 
#               EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES 
#               PROVIDE THE PROGRAM “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR 
#               IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
#               AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND 
#               PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE,
#               YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
#
#               IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY 
#               COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS 
#               PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, 
#               INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE 
#               THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED 
#               INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE 
#               PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER 
#               PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
#
# USAGE:        Select all items in your Spotify playlist, copy them, and paste the output in the
#               multiline entry field. Make sure to also enter a name for the playlist. Then
#               hit 'OK'.
#
# WARNING:      Because the script queries the spotify webpage for each URL, fetching track data
#               for larger playlists may take quite a while.

############# GLOBVAR/PREP ###############

DEFAULT_BACKUP_FOLDER="$HOME/Music/Playlists/Spotify"

#############  LIBRARIES  ################

##############  DIALOGS  #################

ICON=spotify
TITLE="Spotify Playlist Exporter"
WMCLASS="SpotifyPlaylistExporter"

TXT_GUI_ENTRY="Please enter the <b>playlist name</b>. Then copy and paste the <b>Spotify \
URLs</b> in the multiline entry below."

TXT_GUI_PROGRESS="Processing URL list..."

############## USGCHECKS #################

############## FUNCTIONS #################

gui_notify(){
    notify-send -i "$ICON" "$TITLE" "$1"
}

gui_show_error(){
    yad --title="$TITLE" \
      --center --width="400" --height="100" \
      --image=dialog-error \
      --window-icon=dialog-error \
      --class="$WMCLASS" \
      --text="$1" \
      --button="OK":0 2> /dev/null
    echo "$1"
}

gui_show_progress(){
    yad --multi-progress --auto-kill \
    --center --width 400 \
    --title "$TITLE" --image "$ICON" --window-icon "$ICON" \
    --text "$TXT_GUI_PROGRESS" --bar="":NORM
}

gui_url_entry(){

    GUI_OPTIONS="$(yad \
        --form \
        --directory \
        --center --width 300 --height 500 \
        --class="$WMCLASS" --title "$TITLE" \
        --image=$ICON \
        --window-icon=$ICON \
        --button="gtk-ok:0" --button="gtk-cancel:1" \
        --field="$TXT_GUI_ENTRY":LBL "" \
        --field="":LBL "" \
        --field="Save location:" "$DEFAULT_BACKUP_FOLDER" \
        --field="Playlist title:" "" \
        --field="Spotify URLs":TXT "")"
    
    GUI_RET="$?"
    
    if [ "$GUI_RET" = 252 ] || [ "$GUI_RET" = 1 ]  # WM-Close or "Abort"
      then
          exit 1
    fi
    
    EXPORTFOLDER="$(echo "$GUI_OPTIONS" | cut -d '|' -f3)"
    PLNAME="$(echo "$GUI_OPTIONS" | cut -d '|' -f4)"
    URLINPUT="$(echo "$GUI_OPTIONS" | cut -d '|' -f5)"
    
    if [[ -z "$URLINPUT" || -z "$PLNAME" || -z "$EXPORTFOLDER" ]]
      then
          gui_show_error "WARNING: Please make sure to fill out all fields."
          gui_url_entry
    fi
    
    # create target directory if it doesn't exist
    mkdir -p "$EXPORTFOLDER"
}

iterate_over_input(){
    # set up loop variables
    OLDIFS="$IFS"
    IFS=" "
    URLS_CURRENT="0"
    URLS_TOTAL="$(echo "$URLINPUT" | wc -w)"
    
    # iterate over URLs, extract track data and echo progress
    for SPOTIFY_URL in $URLINPUT; do
      get_music_data
      
      URLS_CURRENT="$(($URLS_CURRENT + 1))"
      PROGRESS="$((( 100 * $URLS_CURRENT ) / $URLS_TOTAL))"
      printf "1:$PROGRESS\n1:#$URLS_CURRENT out of $URLS_TOTAL processed\n"
      
    done
    
    # check for error in get_music_data() and notify user
    if [[ $ERROR = 1 ]]
      then
          printf "1:100\n1:#All items processed. There were some errors\n"
          gui_notify "All items processed. There were some errors. Please check CLI output."
      else
          printf "1:100\n1:#All items processed.\n"
          gui_notify "All items processed."
    fi
    
    IFS="$OLDIFS"
}


# <This comment is now obsolete but keeping it for posterity's sake:>
# (moved tee to get_music_data() because piping from iterate_over_input() created
# a subshell that made assigning $ERROR globally impossible
# cf. http://stackoverflow.com/q/6662915/1708932)

get_music_data(){
    SPOTIFY_HTML="$(curl "$SPOTIFY_URL" 2>&1)"
    RET_CURL="$?"
    
    if [[ "$RET_CURL" -ne "0" ]]
      then
          echo "Error while fetching track data for $SPOTIFY_URL" \
           | tee -a "$EXPORTFOLDER/spotify_export_$PLNAME.txt"
          ERROR="1"
          continue
    fi
    
    TRACKDATA="$(echo "$SPOTIFY_HTML" \
     | awk 'BEGIN{IGNORECASE=1;FS="<title>|</title>";RS=EOF} {print $2}' \
     | sed '/^$/d' \
     | sed 's/ on Spotify//g' \
     | recode html..ISO-8859-1)"
     
    echo "$TRACKDATA|$SPOTIFY_URL"| tee -a "$EXPORTFOLDER/spotify_export_$PLNAME.csv"
}

################ MAIN ####################

gui_url_entry
iterate_over_input | gui_show_progress
